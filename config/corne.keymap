/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_se.h"

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <300>;
};

/ {
    macros {

        ZMK_MACRO(arrow,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp MINUS &kp LS(DOT)>;
        )

        ZMK_MACRO(eql_arrow,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp EQL &kp LS(DOT)>;
        )
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <15 20>;
            bindings = <&caps_word>;
        };
        combo_eql_arrow {
            timeout-ms = <50>;
            key-positions = <4 5>;
            layers = <0 1 2 4>;
            bindings = <&eql_arrow>;
        };

        combo_arrow {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <0 1 2 4>;
            bindings = <&arrow>;
        };

         combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15>;
            layers = <0 1 2 4>;
            bindings = <&kp TAB>;
        };
        combo_LPRN {
            timeout-ms = <50>;
            key-positions = <3 4>;
            layers = <0 1 2 4>;
            bindings = <&kp LPRN>;
        };

        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0 1 2 4>;
            bindings = <&kp LBRC>;
        };

        combo_RPRN {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0 1 2 4>;
            bindings = <&kp RPRN>;
        };

        combo_RBRC {
            timeout-ms = <50>;
            key-positions = <31 32>;
            layers = <0 1 2 4>;
            bindings = <&kp RBRC>;
        };

        combo_UNDER {
            timeout-ms = <50>;
            key-positions = <19 31>;
            layers = <0 1 2 4>;
            bindings = <&kp UNDER>;
        };

         combo_del {
            timeout-ms = <50>;
            key-positions = <33 34>;
            layers = <0 1 2 4>;
            bindings = <&kp DEL>;
        };

       combo_bspc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            layers = <0 1 2 4>;
            bindings = <&kp BSPC>;
        };

        combo_ae {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0 1 2 4>;
            bindings = <&kp RA(Q)>;
        };

        combo_oe {
            timeout-ms = <50>;
            key-positions = <32 33>;
            layers = <0 1 2 4>;
            bindings = <&kp RA(P)>;
        };

        combo_a {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0 1 2 4>;
            bindings = <&kp RA(W)>;
        };

        combo_to_default {
            timeout-ms = <50>;
            key-positions = <38 39>;
            bindings = <&to 0>;
};

    };

        keymap {
                compatible = "zmk,keymap";

/*
* Base Layer: Colemak DH
*
* ,----------------------------------.                              ,----------------------------------.
* |   Q  |   W  |   F  |   P  |   B  |                              |   J  |   L  |   U  |   Y  | ;  : |
* |------+------+------+------+------|                              |------+------+------+------+------|
* |GUI(A)|alt(R)|sft(S)|ctl(T)|   G  |                              |   M  |ctl(N)|sft(E)|alt(I)|GUI(O)|
* |------+------+------+------+------|                              |------+------+------+------+------|
* |   Z  |   X  |   C  |   D  |   V  |                              |   K  |   H  | ,  < | . >  | /  ? |
* `--------------------+------+------|                              |------+------+------+------+------'
*               | TAB  |  Sym |Space |                              | Enter|  Nav | BSPC |
*               `--------------------'                              `--------------------'
*/
            default_layer {
        bindings = <

        &trans   &kp Q &kp W &kp F &kp P &kp B                       &kp J &kp L  &kp U    &kp Y   &kp SEMI &trans
        &trans &mt LGUI A &mt LALT R &mt LSFT S &mt LCTL T &kp G     &kp M &mt RCTL N &mt RSFT E &mt RALT I &mt LGUI O &trans
        &trans   &kp Z &kp X &kp C &kp D &kp V                       &kp K &kp H  &kp CMMA &kp DOT &kp SLASH &trans
                            &kp TAB &mo 1 &mt LALT SPC                       &kp RET &mo 2 &kp BSPC
        >;
        };

/*
* Sym Layer: Symbols
*
* ,----------------------------------.                                ,-----------------------------------.
* |   !    |   @  |   #  |   $  |   %  |                              |   ^  |   [  |   ]  |   &  |   *   |
* |--------+------+------+------+------|                              |------+------+------+------+-------|
* |GUI(tab)|  alt |   "  |   '  |   |  |                              |   _  |   {  |   }  |   =  |Backspc|
* |--------+------+------+------+------|                              |------+------+------+------+-------|
* |   ESC  |   ~  |   `  |   |  |   \  |                              |   -  |   (  |   )  |   +  | Delete|
* `----------------------+------+------|                              |------+------+------+------+-------'
*                 |      |      |  GUI |                              | Enter| Fkeys|      |
*                 `--------------------'                              `--------------------'
*/
            left_layer {
        bindings = <

        &trans  &kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT                                 &kp CRRT &kp LBKT &kp RBKT &kp AMPS &kp KMLT &trans
        &trans  &mt LGUI TAB &mt LALT LC(S) &mt LSFT LS(RA(DQT)) &mt LCTL RA(SQT) &kp PIPE      &kp UNDER &mt RCTL LBRC  &mt RSFT RBRC &mt RALT EQL  &mt LALT BSPC &trans
        &trans  &kp ESC &kp TILDE &kp APOS &kp PIPE2 &kp BACKSLASH                              &kp MINUS &kp LPRN &kp RPRN &kp PLUS  &kp DEL &trans
                                           &trans &mo 1  &kp LGUI                                &trans &mo 4 &trans
        >;
        };

/*
* Nav/Num Layer: Numbers, navigation
*
* ,----------------------------------.                              ,----------------------------------.
* |   1  |   2  |  3   |  4   |  5   |                              |   6  |   7  |   8  |   9  |  0   |
* |------+------+------+------+------|                              |------+------+------+------+------|
* |  GUI |  Alt | Shift| CTRL |      |                              | PgUp |  ←   |   ↓  |  ↑   |  →   |
* |------+------+------+------+------|                              |------+------+------+------+------|
* |      | CUT  | COPY | UNDO | PASTE|                              | PgDn | Home |  End |Insert|Delete|
* `--------------------+------+------|                              |------+------+------+------+------'
*               |      |Fkeys |Space |                              | Enter|      |      |
*               `--------------------'                              `--------------------'
*/
            right_layer {
        bindings = <

        &trans    &kp NUM_1  &kp NUM_2  &kp NUM_3  &kp NUM_4  &kp NUM_5                   &kp NUM_6  &kp NUM_7  &kp NUM_8  &kp NUM_9  &kp NUM_0 &trans
        &trans &mt LGUI TAB  &mt LALT FSLH &mt LSFT DOT &mt LCTL COLON &kp GRAVE       &kp PG_UP &kp LEFT &kp DOWN &kp UP  &kp RIGHT &trans
        &trans  &kp ESC  &kp LC(X) &kp LC(C) &kp LC(Z)   &kp LC(V)                      &kp PG_DN &kp HOME &kp END &kp INSERT  &kp DEL &trans
                                                     &trans &mo 4 &trans               &trans  &mo 2 &trans
        >;
        };

/*
* Gaming: Gaming layer
*
* ,----------------------------------.                              ,----------------------------------.
* |  TAB |   Q  |   W  |   E  |   R  |                              |   T  |   Y  |   U  |   I  |  O   |
* |------+------+------+------+------|                              |------+------+------+------+------|
* | SHIFT|   A  |   S  |   D  |   F  |                              |   G  |   H  |   J  |   K  |  L   |
* |------+------+------+------+------|                              |------+------+------+------+------|
* | CTRL |   Z  |   X  |   C  |   V  |                              |   B  |   N  |   M  | , <  | . >  |
* `-------------+------+------+------|                              |------+------+------+------+------'
*               | DEL  |   /  |Space |                              | Enter|  Nav | DEL  |
*               `--------------------'                              `--------------------'
*/
            gaming_layer {
                bindings = <

        &trans   &kp TAB &kp Q &kp W &kp E &kp R                       &kp T &kp Y  &kp U &kp I &kp O &trans
        &trans   &kp LSFT &kp A &kp S &kp D &kp F                      &kp G &kp H &kp J &kp K &kp L &trans
        &trans   &kp LCTL &kp Z &kp X &kp C &kp V                      &kp B &kp N &kp M &kp CMMA &kp DOT &trans
                        &kp DEL &kp SLASH &kp SPC                      &kp RET &mo 2 &kp DEL
            >;
            };
/*
* Function/media Layer: Function/media keys
*
* ,----------------------------------.                              ,-----------------------------------.
* |  F1  |  F2  |  F3  |  F4  |  F5  |                              |   F6  |  F7  |  F8  |  F9  | F10  |
* |------+------+------+------+------|                              |-------+------+------+------+------|
* |  GUI | Alt  |Shift | Ctrl |      |                              |Gaming | Ctrl |Vol Up|  Mute | F11 |
* |------+------+------+------+------|                              |-------+------+------+------+------|
* |BT_CLR|BT_NXT|BT_PRV| BT 0 | BT 1 |                              | BT 2  |PSCRN |Vol DN|      | F12  |
* `--------------------+------+------|                              |------+------+------+------+-------'
*               |      |      |      |                              |      |      |      |
*               `--------------------'                              `--------------------'
*/
             tri_layer {
        bindings = <

        &trans  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                              &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &trans
        &trans  &kp LGUI &kp LALT &kp LSFT &kp LCTL &trans                      &tog 3 &trans  &kp K_VOL_UP &kp K_MUTE &kp F11 &trans
        &trans  &bt BT_CLR  &bt BT_NXT &bt BT_PRV &bt BT_SEL 0 &bt BT_SEL 1     &bt BT_SEL 2 &kp PSCRN  &kp K_VOL_DN  &trans &kp F12 &trans
                                         &trans &trans &trans                   &trans &trans &trans
        >;
        };


    };
};
